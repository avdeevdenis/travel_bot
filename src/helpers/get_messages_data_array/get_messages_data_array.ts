import { ResponseData } from '../../typings';

/**
 * –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ travel-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
 */
export const getMessageDataArray = (requiredData: Partial<ResponseData>) => {
  return requiredData.rows.map((requiredItem) => {
    const {
      country,
      date,
      nights,
      price,
      khot,
      link,
      updated,
      countryCode,
    } = requiredItem;

    const NEW_LINE = '\n';

    const flag = getFlagIconByCountryName(countryCode);
    const flagString = flag ? ' ' + flag : '';
    const dateTo = getDateTo(date, nights);
    // const updatedTextI18N = getUpdatedTextI18N(updated);
    const updatedDateTime = DateTime.now().setZone('Europe/Moscow').minus({ minutes: updated }).toFormat('HH:mm');

    const linkUrl = process.env.TRAVEL_SEARCHER_HOST + link;

    const countryCodeHashtag = `#${countryCode.toLocaleUpperCase()}`;
    const nightsHashtag = `#n${nights}`;
    const priceHashtag = getPriceHashtag(price);
    const dateHashtag = `#d${date.replace(/\./g, '\\_')}`;
    const khotHashtag = getKhotHashtag(khot);

    const hashtags = `${countryCodeHashtag} ${nightsHashtag} ${priceHashtag} ${dateHashtag} ${khotHashtag}`;

    let messageString = '';

    messageString += `[${country}${flagString}](${linkUrl})${NEW_LINE}`;
    messageString += `–í—ã–≥–æ–¥–Ω–æ—Å—Ç—å *${khot}%.*${NEW_LINE}`;
    messageString += `–°—Ç–æ–∏–º–æ—Å—Ç—å *${price}*${NEW_LINE}`;
    messageString += `–î–∞—Ç—ã *${date} - ${dateTo}* ‚Üí *${nights}* –Ω–æ—á–µ–π.${NEW_LINE}${NEW_LINE}`;
    // messageString += `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} ${updatedTextI18N} –Ω–∞–∑–∞–¥.${NEW_LINE}`;
    messageString += `–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ ${updatedDateTime}.${NEW_LINE}`;
    messageString += `${hashtags}${NEW_LINE}`;

    return messageString;
  });
};

const { DateTime } = require('luxon');

const getFlagIconByCountryName = (countryCode) => {
  switch (countryCode) {
    case 'gr':
      return 'üá¨üá∑';

    case 'cy':
      return 'üá®üáæ';

    case 'cu':
      return 'üá®üá∫';

    case 'mv':
      return 'üá≤üáª';

    case 'ae':
      return 'üá¶üá™';

    case 'sc':
      return 'üá∏üá®';

    default:
      return '';
  }
};

const getDateTo = (date, nights) => {
  const [day, month, year] = date.split('.');

  const now = DateTime.fromObject({
    month,
    year,
    day,
    hour: 0,
    minutes: 0,
    zone: 'Europe/Moscow'
  });

  const dateTo = now.plus({ days: nights });

  const dateToFormatted = dateTo.toFormat('dd.MM.yyyy');

  return dateToFormatted;
};

// const getUpdatedTextI18N = (count) => {
//   const percentageOfSeparation = count % 10;

//   if (percentageOfSeparation === 0 || percentageOfSeparation >= 5 || (count >= 11 && count <= 20)) {
//     return '–º–∏–Ω—É—Ç';
//   }

//   if (percentageOfSeparation === 1) {
//     return '–º–∏–Ω—É—Ç—É';
//   }

//   if (percentageOfSeparation >= 2 || percentageOfSeparation <= 4) {
//     return '–º–∏–Ω—É—Ç—ã';
//   }
// };

/**
 * –û–∫—Ä—É–≥–ª—è–µ–º —Å—É–º–º—É –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Ü–µ–ª—ã—Ö –¥–µ—Å—è—Ç–∫–æ–≤
 */
const getPriceHashtag = (price: string) => {
  const priceStringNoSpaces = price.split(' ').join('');
  const priceInt = parseInt(priceStringNoSpaces, 10);
  const priceLength = priceInt.toString().length;
  const firstDigitRounded = Math.round(priceInt / (10 ** (priceLength - 1)));

  const priceRounded = firstDigitRounded + '0'.repeat(priceLength - 1);

  return `#p${priceRounded}`;
};

const getKhotHashtag = (khot: number) => {
  const khotRounded = Math.floor(khot);
  const khotRoundedByDozens = khotRounded - khotRounded % 10;

  return `#k${khotRoundedByDozens}`;
};